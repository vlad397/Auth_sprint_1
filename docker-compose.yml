version: "3.9"

networks:
  default:
    name: $NETWORK_NAME

services:
  postgres-admin:
    env_file:
      - .postgres_admin_env
    image: postgres:13.3
    user: $POSTGRES_USER:$POSTGRES_GROUP
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 3s
      retries: 5

  postgres-setup:
    env_file:
      - .env
    environment:
      - PGPASSWORD=$POSTGRES_PASSWORD
    image: postgres:13.3
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    entrypoint: ["psql", "-h", "postgres-admin",
                 "-U", $POSTGRES_USER, "-d", $POSTGRES_DB,
                 "-c","CREATE SCHEMA IF NOT EXISTS content"
    ]

  app:
    env_file:
      - .env
    environment:
      - DB_HOST=postgres-admin
      - DB_USER=$POSTGRES_USER
      - DB_NAME=$POSTGRES_DB
      - DB_PASSWORD=$POSTGRES_PASSWORD
    depends_on:
      postgres-setup:
        condition: service_completed_successfully
    image: yp_app
    build:
      context: ./app/
      dockerfile: Dockerfile
    volumes:
      - ./app/static:/app/static:rw
    healthcheck:
      test: curl -sS http://127.0.0.1:8000 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  postgres-app-data-restore:
    env_file:
      - .env
    environment:
      - PGPASSWORD=$POSTGRES_PASSWORD
    image: postgres:13.3
    depends_on:
      app:
        condition: service_healthy
    restart: "no"
    volumes:
      - ./app/app.data.sql:/app.data.sql
    entrypoint: ["psql", "-h", "postgres-admin",
                 "-U", $POSTGRES_USER, "-d", $POSTGRES_DB,
                 "-f","/app.data.sql"
    ]

  app-web:
    env_file:
      - .env
    image: nginx:latest
    depends_on:
      postgres-app-data-restore:
        condition: service_completed_successfully
    volumes:
      - ./app/nginx.conf:/etc/nginx/nginx.conf
      - ./app/static:/static:ro
    ports:
      - 9000:8000

  redis:
    env_file:
      - .env
    image: bitnami/redis:latest # поддерживает env REDIS_PASSWORD
    depends_on:
      app:
        condition: service_healthy
      app-web:
        condition: service_started
    healthcheck:
      test: redis-cli -a $REDIS_PASSWORD ping || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    ports:
      - 6379:6379

  elasticsearch:
    env_file:
      - .env
    environment:
      - discovery.type=single-node
      - quiet=true
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    ports:
      - 9200:9200
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: curl -sS -X GET "http://127.0.0.1:9200/_cluster/health?wait_for_status=green&timeout=10s" || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s

  elasticsearch-index-schema:
    env_file:
      - .env
    image: appropriate/curl
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: "no"
    volumes:
      - ./etl/es_index.sh:/es_index.sh
    entrypoint: /bin/sh /es_index.sh

  etl:
    env_file:
      - .env
    environment:
      - DB_HOST=postgres-admin
      - DB_USER=$POSTGRES_USER
      - DB_NAME=$POSTGRES_DB
      - DB_PASSWORD=$POSTGRES_PASSWORD
    image: python:3.9.12-slim-buster
    depends_on:
      elasticsearch-index-schema:
        condition: service_completed_successfully
    volumes:
      - ./etl/:/etl/
      - ./etl/requirements.txt:/requirements.txt
    entrypoint: >
      /bin/bash -c "
          pip3 install -r /requirements.txt 2>/dev/null 1>/dev/null &&
          cd /etl/ &&
          python3 etl.py
      "

  check-etl-initial-load:
    env_file:
      - .env
    image: appropriate/curl
    depends_on:
      etl:
        condition: service_started
    restart: "no"
    volumes:
      - ./etl/etl_check_initial_load.sh:/etl_check_initial_load.sh
    entrypoint: /bin/sh /etl_check_initial_load.sh

  api:
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      elasticsearch-index-schema:
        condition: service_completed_successfully
      check-etl-initial-load:
        condition: service_completed_successfully
    image: yp_api
    build:
      context: ./api/
      dockerfile: Dockerfile
    healthcheck:
      test: curl -sS http://127.0.0.1:8000/api/openapi || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  api-web:
    env_file:
      - .env
    image: nginx:latest
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ./api/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 8000:8000


  postgres-auth:
    env_file:
      - .postgres_auth_env
    image: postgres:13.3
    user: $POSTGRES_USER:$POSTGRES_GROUP
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 3s
      retries: 5
  
  redis-auth:
    env_file:
      - .env
    image: bitnami/redis:latest # поддерживает env REDIS_PASSWORD
    volumes:
      - ./auth/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: redis-cli -a $REDIS_PASSWORD ping || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    expose:
      - "6379"
  
  auth_app:
    build:
      context: ./auth
      dockerfile: Dockerfile
    depends_on:
      - redis-auth:
        condition: service_healthy
      - postgres-auth:
        condition: service_healthy
    env_file:
      - ./.env
    expose:
      - "8008"
  
  jaeger:
    image: jaegertracing/all-in-one:latest 
    ports:
      - "6831:6831/udp"
      - "16686:16686"

  nginx-auth:
      image: nginx:latest
      volumes:
        - ./nginx/etc/nginx/conf.d:/etc/nginx/conf.d
        - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      depends_on:
        - auth_app
      ports:
        - "80:80"
